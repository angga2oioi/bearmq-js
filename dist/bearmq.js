var T=Object.defineProperty,$=Object.defineProperties;var I=Object.getOwnPropertyDescriptors;var m=Object.getOwnPropertySymbols;var L=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable;var q=(r,e,t)=>e in r?T(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,O=(r,e)=>{for(var t in e||(e={}))L.call(e,t)&&q(r,t,e[t]);if(m)for(var t of m(e))P.call(e,t)&&q(r,t,e[t]);return r},w=(r,e)=>$(r,I(e));var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports);var S=(r,e,t)=>new Promise((g,f)=>{var a=o=>{try{d(t.next(o))}catch(h){f(h)}},y=o=>{try{d(t.throw(o))}catch(h){f(h)}},d=o=>o.done?g(o.value):Promise.resolve(o.value).then(a,y);d((t=t.apply(r,e)).next())});var v=j(b=>{var J=require("ws");b.useMQ=r=>{let e=`http://${r}`,t=`ws://${r}`,g=1,f=500,a=[],y=u=>S(null,null,function*(){let s;return a.length>0&&(s=fetch(`${e}/enqueue`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({queue:u.queue,jobs:a})}),a=[]),s}),d=(u,s)=>(a.push(s),a.length>=f?y(u):null),o=(u,s)=>{var i,n;let l={queue:u,submit:c=>S(null,null,function*(){if(!l.queue)throw new Error("Queue is not created yet.");return d(l,c)})};return fetch(`${e}/config`,{method:"POST",body:JSON.stringify({queue:u,index:(i=s==null?void 0:s.index)!=null?i:[],fanout:(n=s==null?void 0:s.fanout)!=null?n:!1})}).catch(console.error),setInterval(()=>{a.length>0&&y(l)},g),l},h=(u,s=null)=>{let l=require("node:events"),i=new l,n=new J(t);return i.ack=c=>{if(!n||n.readyState!==J.OPEN)throw new Error("Socket is not connected.");n.send(JSON.stringify({type:"ack",queue:u,jobId:c}))},n.addEventListener("open",c=>{n==null||n.send(JSON.stringify({type:"subscribe",queue:u,prefetch:s}))}),n.addEventListener("message",c=>{let{data:E,type:k}=JSON.parse(c.data);E.length<1||E.forEach(N=>{i.emit("message",JSON.stringify(w(O({},N),{type:k})))})}),n.addEventListener("close",c=>{console.log("WebSocket connection closed:",c.code,c.reason),i.emit("close",c)}),n.addEventListener("error",c=>{console.error("WebSocket error:",c),i.emit("error",c)}),i.close=()=>n.close(),i};return fetch(`${e}/ping`,{method:"GET"}).catch(console.error),{useProducer:o,useConsumer:h}}});var{useMQ:B}=v();module.exports=B;
